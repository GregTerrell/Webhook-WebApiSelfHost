using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;

/* This class defines a couple functions that validate the incoming webhook request signature.  The signature header is 
 * automatically generated by the LooUQ cloud and is the SHA256 hash of your alert's data and your WebHook secret, which
 * you entered in Setup.  If you do not enter a secret in your notifcation rule the alert data will not be signed.
 */


namespace WebHook_WebApiSelfHost
{
    public static class IotqiWebhook
    {
        internal static bool ValidateWebhookObject(HttpRequestMessage webhookMessage, IotqiAlert alertContent)
        {
            var signatureReceived = "";
            var signatureComputed = "";
            if (webhookMessage.Headers.TryGetValues("X-Iotqi-Signature", out IEnumerable<string> headerValues))
            {
                signatureReceived = headerValues.FirstOrDefault();
                signatureComputed = IotqiWebhook.GetHashString(JsonConvert.SerializeObject(alertContent).ToLower() + Program.WebhookCredentials);
            }

            if (!string.IsNullOrEmpty(signatureReceived) && signatureReceived != signatureComputed)
            {
                return false;                           // received signature is invalid
            }
            if (string.IsNullOrEmpty(alertContent.AlertName))
            {
                return false;                           // alerts must contain names; if this is null, the webhook POST is malformed
            }
            return true;
        }

        private static byte[] GetHash(string inputString)
        {
            HashAlgorithm algorithm = SHA256.Create();
            return algorithm.ComputeHash(Encoding.UTF8.GetBytes(inputString));
        }

        public static string GetHashString(string inputString)
        {
            StringBuilder sb = new StringBuilder();
            foreach (byte b in GetHash(inputString))
                sb.Append(b.ToString("X2"));

            return sb.ToString();
        }
    }
}
